environment: ""
appName: app
branch: ""
version: ""
nodeSelector: {}
tolerations: {}
#  - key: "key1"
#    operator: "Equal"
#    value: "value1"
#    effect: "NoSchedule"
jaegerEnabled: false
commands: []
args: []

# replica values
# in case HPC enable
# min HPA replica
replicas: 1
buildId:
serviceAccountName: app  # infra should always create service account "app"
deployment:
  enabled: true

rbac:
  create: false
  resources: []

service:
  enabled: false
#  ports:
#    http:
#      externalPort: 8080
#      internalPort: 8080
#      protocol: TCP

serviceExternal:
  enabled: false
  # Optional annotations to be applied to service (e.g. to set AWS LB attributes)
  annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "900"
serviceInternal:
  enabled: false
  # Optional annotations to be applied to service (e.g. to set AWS LB attributes)
  annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "900"
  ports:
    http:
      internalPort: 80
      externalPort: 80
      protocol: TCP
  # Optional LoadBalancer IP
  loadBalancerIP: ""
  # Optional LoadBalancer Source Ranges
  loadBalancerSourceRanges: []

serviceHeadless:
  enabled: false

serviceExternalName:
  enabled: false
  externalName: ""

image:
  repository: nginx
  tag: latest

lifecycle:
#  preStop:
#    exec:
#      command: ["sleep","10"]

strategy:
  rollingUpdate:
    maxSurge:
    maxUnavailable:
  type: RollingUpdate

prometheus:
  enabled: false
  port: "8011"
  path: "/metrics"

consulinject:
  enabled: false

resources: {}
  # requests:
  #   memory: 400Mi

ingress:
  enabled: false
  className: ""
  fqdn: ""
  aliases: ""
  vaultCert: ""
  extraHosts: {}
    # "some-host.com":
    #   locations:
    #     "/main":
    #       pathType: Exact
    #       serviceName: "test-sv"
    #       servicePort: 8888
    #     "/page":
    #       pathType: Exact
    #       serviceName: "test-sv"
    #       servicePort: 8881
    # "test.some-host.com":
    #   locations:
    #     "/secondary":
    #       pathType: Prefix
    #       serviceName: "test-sv"
    #       servicePort: 8880
    #     "/path":
    #       pathType: Prefix
    #       serviceName: "test-sv"
    #       servicePort: 8889

job:
# If true, create simple jobs, e.g. migration
  enabled: false
  spec: {}
  # printenv:
  #   backoffLimit: 1
  #   command: ["printenv"]
  #   args: ["HOSTNAME", "PATH"]
  # host:
  #   command: ["echo"]
  #   args: ["HELLO", "WORLD"]

cloudflare:
  enabled: false

cronjob:
# If true, create cron jobs
  enabled: false
  spec: {}
  # printenv:
  #   command: ["printenv"]
  #   args: ["HOSTNAME","PATH"]
  #   schedule: "* * * * *"
  # host:
  #   command: ["echo"]
  #   args: ["HELLO", "WORLD"]
  #   schedule: "*/2 * * * *"

worker:
  # If true, create worker deployments
  enabled: false
#  spec:
#   printenv:
#    initContainers:
#      command:
#        - make
#      args:
#        - migrate-up
#        - DB_HOST=$(POSTGRES_HOST)
#        - DB_PORT=$(POSTGRES_PORT)
#        - DB_USER=$(POSTGRES_USER)
#        - DB_PASS=$(POSTGRES_PASS)
#        - DB_NAME=$(POSTGRES_DATABASE)
#     replicas: 3
#     command: ["printenv"]
#     args: ["HOSTNAME","PATH"]
#     resources:
#       limits:
#         cpu: 2000m
#         memory: 1750Mi
#       requests:
#         memory: 1750Mi
#         cpu: 200m
#     livenessProbe:
#       mode: httpGet
#       execCommand:
#         command: "cat"
#       httpGet:
#         port: 80
#         path: "/health"
#       tcpSocket:
#         port: 80
#     readinessProbe:
#       mode: httpGet
#       execCommand:
#         command: "cat"
#       httpGet:
#         port: 80
#         path: "/health"
#       tcpSocket:
#         port: 80

livenessProbe:
  enabled: false
  mode: httpGet
  execCommand:
    command: "cat"
  httpGet:
    port: 80
    path: "/health"
  tcpSocket:
    port: 80

readinessProbe:
  enabled: false
  mode: httpGet
  execCommand:
    command: "cat"
  httpGet:
    port: 80
    path: "/health"
  tcpSocket:
    port: 80

secrets: {}
configmap: {}
vaultProjectName: ""
vaultNamespace: ""

alerting: {}
  # rules:
  #   "ContainerWaitingReason":
  #     annotations:
  #       message: '{{ $labels.container }} status - `WAITING`, reason - {{ $labels.reason }}'
  #     expr: kube_pod_container_status_waiting_reason != 0
  #     for: 1m
  #     labels:
  #       severity: critical

volume:
  enabled: false
  mount:
    readOnly: true
    path: /data
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClass:
    name: gp2
    create: {}
#    create:
#      provisioner: "ebs.csi.aws.com"
#      parameters:
#        type: gp3
#        iops: "3000"

hpa:
  enabled: false
  maxReplicas: 6
  cpu: 70
  memory: 70

pdb:
  enabled: false
  maxUnavailable: 1

configfiles: {}
  # mountPath: "/etc/app"
  # data:
  #   config.yaml: |-
  #     foo: bar

extensions: {}
  # authz:
  #   image:
  #     repository: "example.org"
  #     name: "sidecar"
  #     tag: "1.0.0"
  #   command:
  #     - start
  #   args:
  #     - arg1
  #   env:
  #     foo: bar
  #   configfiles:
  #     mountPath: "/etc/sidecar"
  #     data:
  #       config.yaml: |-
  #         foo: bar
  #   lifecycle: {}
  #   livenessProbe:
  #     httpGet: {}
  #   readinessProbe:
  #     httpGet: {}
  #   resources:
  #     limits:
  #       memory: 100Mi
  #       cpu: 0.1
  #     requests:
  #       memory: 100Mi
  #       cpu: 0.1
